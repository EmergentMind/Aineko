'''
 This is based on the EchoBot example from sleekxmpp.com/getting_started/echobot.html

 Itended scope:
  This class should simply establish single or MUC sessions and communicate messages to and from core
  Eventually all sessions should be OTR
'''

import sys
import logging
import getpass
from optparse import OptionParser

import sleekxmpp

class IMHandler(sleekxmpp.ClientXMPP):
  def __init__(self, jid, password):
    super(IMHandler, self).__init__(jid, password)
    
    self.add_event_handler("session_start", self.start)
    self.add_event_handler("message", self.messageInput)
    
  def start(self, event):
    self.send_presence()
    #TODO add exception handling to get_roster()
    self.get_roster()
      
  #TODO Expand method to hand additional message types and to pass input to core instead of echoing.
  def messageInput(self, msg):
    if msg['type'] in ('chat', 'normal'):
      msg.reply("Thanks for sending\n%(body)s" % msg).send()
      
#right now this is set up to be started using command line args.
if __name__ == '__main__':
  # Setup the command line arguments.
  OptionParser = OptionParser()
 
  # Output verbosity options.
  OptionParser.add_option('-q', '--quiet', help='set logging to ERROR',
                  action='store_const', dest='loglevel',
                  const=logging.ERROR, default=logging.INFO)
  OptionParser.add_option('-d', '--debug', help='set logging to DEBUG',
                  action='store_const', dest='loglevel',
                  const=logging.DEBUG, default=logging.INFO)
  OptionParser.add_option('-v', '--verbose', help='set logging to COMM',
                  action='store_const', dest='loglevel',
                  const=5, default=logging.INFO)

  # JID and password options.
  OptionParser.add_option("-j", "--jid", dest="jid",
                  help="JID to use")
  OptionParser.add_option("-p", "--password", dest="password",
                    help="password to use")
  
  options, args = OptionParser.parse_args()
  
  if options.jid is None:
    options.jid = input("Username: ")
  if options.password is None:
    options.password = getpass.getpass("Password: ")
    
  # Setup logging.
  logging.basicConfig(level = options.loglevel,
                      format='%(levelname)-8s %(message)s')
  
   
  # Setup and register plugins. Order does not matter.
  xmpp = IMHandler(options.jid, options.password)
  xmpp.register_plugin('xep_0030') # Service Discovery
  xmpp.register_plugin('xep_0004') # Data Forms
  xmpp.register_plugin('xep_0060') # PubSub
  xmpp.register_plugin('xep_0199') # XMPP Ping
  
  # Connect to the XMPP server and start processing XMPP stanzas.
  if xmpp.connect(('talk.google.com', 5222)):
    xmpp.process(block=True)
    print("Done")
  else:
    print("Unable to connect.")